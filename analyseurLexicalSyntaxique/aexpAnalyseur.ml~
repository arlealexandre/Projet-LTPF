#use "analist.ml";;

(*** 5.2 Expressions arithmétiques (7.3) ***)

(* Question 1 : *)
(*Grammaire*)
(*** E ::= E ’+’ n | n ***)

type aexp =
| Acst of int
| Apl of aexp * aexp
| Amo of aexp * aexp
| Amu of aexp * aexp

let pa_C : char analist = terminal '3' -| terminal '8'

let _ = assert ((pa_C value) = [])
let _ = try let _ = pa_C notExpr in
            print_endline "pa_C a fonctionné (ne devrait pas être le cas)"
        with Echec -> print_endline "pa_C a échoué, fonctionnement normale"

let rec pa_E : char analist =
  fun l ->
  l |> pa_E --> terminal '+' --> pa_C -| pa_C

let _ = try let _ = pa_E(list_of_string "3+8") in
            print_endline "pa_E a fonctionné (ne devrait pas être le cas)"
        with Stack_overflow -> print_endline "Echec car on a de la récurence a gauche dans la grammaire"

let is_threeEight (c : char) : 'res option =
  if ((Char.code c - Char.code '0' = 3) || Char.code c - Char.code '0' = 8) then
    Some(Char.code c - Char.code '0')
  else
    None

let is_plus(c : char) : 'res option =
  if (Char.code c = 43) then Some(Char.code c) else None


let pr_C : (int, char) ranalist = terminal_res is_threeEight

let _ = let (value, liste) = pr_C expr in assert (value = 8 && liste = ['+'; '3'])
let _ = let (value, liste) = pr_C value in assert (value = 8 && liste = [])
let _ = try let _ = pr_C notExpr in
            print_endline "pr_C a fonctionné (ne devrait pas être le cas)"
        with Echec -> print_endline "pr_C a échoué, fonctionnement normale"

(*pr_E est impossible*)
(*
let rec pr_E : (aexp, char) ranalist =
  fun l ->
  l |> pr_E ++> fun a -> terminal_res is_plus ++> fun p->  pr_C ++> fun b -> epsilon_res (Apl(a,Acst(b)))  +| pr_C ++> fun a -> epsilon_res (Acst(a))
 *)

(*Question 2 : *)
(*** Nouvelle grammaire ***)

(***
E ::= C SE
SE ::= ’+’ C SE | ε
 ***)

let rec pa_E : char analist =
  fun l ->
  l |> pa_C --> pa_SE and
    pa_SE : char analist =
      fun l ->
      l |> terminal '+' --> pa_C --> pa_SE -| epsilon

let _ = assert (pa_E value = [])
let _ = assert (pa_E expr = [])
let _ = try let _ = pa_E notExpr in
            print_endline "pa_E a fonctionné (ne devrait pas être le cas)"
        with Echec -> print_endline "pa_E a échoué, fonctionnement normale"

let bigExpr = list_of_string "8+3+8"


let rec pr_E : (aexp, char) ranalist =
  fun l ->
  l |> pr_C ++> fun a -> pr_SE (Acst(a)) and
    pr_SE (x : aexp) : (aexp, char) ranalist =
      fun l ->
      l |> (terminal '+' -+> pr_C ++> fun a ->  pr_SE (Apl(x,Acst(a)))) +| epsilon_res (x)

let _ = let (aex, liste) = pr_E bigExpr in assert (aex = Apl (Apl (Acst 8, Acst 3), Acst 8) && liste = [])
let _ = let (aex, liste) = pr_E expr in assert (aex = Apl (Acst 8, Acst 3) && liste = [])
let _ = try let _ = pr_E notExpr in
            print_endline "pr_E a fonctionné (ne devrait pas être le cas)"
        with Echec -> print_endline "pr_E a échoué, fonctionnement normale"

(*** Question 3 : ***)

(*Grammaire*)
(***
E ::= T SE
SE ::= ’+’  T SE | ε
T := C | '(' E ')'
 ***)

let rec pr_E1 : (aexp, char) ranalist =
  fun l ->
  l |> pr_T ++> fun a -> pr_SE1 a and
    pr_SE1 (x : aexp) : (aexp, char) ranalist =
      fun l ->
      l |> (terminal '+' -+> pr_T ++> fun a -> pr_SE1 (Apl(x,a)) )  +| (epsilon_res x) and
    pr_T :(aexp, char) ranalist =
      fun l ->
      l |> (pr_C ++> fun a -> epsilon_res (Acst(a))) +| (terminal '(' -+> pr_E1 ++> fun a -> terminal ')' -+> epsilon_res a)

let bigbigExpr = list_of_string "3+(8+3)+(8)"
let bigValue = list_of_string "(8)"

let _ = let (aex, liste) = pr_E1 bigExpr in assert (aex = Apl (Apl (Acst 8, Acst 3), Acst 8) && liste = [])
let _ = let (aex, liste) = pr_E1 bigbigExpr in assert (aex = Apl (Apl (Acst 3, Apl (Acst 8, Acst 3)), Acst 8) && liste = [])
let _ = let (aex, liste) = pr_E1 bigValue in assert (aex = Acst 8 && liste = [])

(*** Question 4 : ***)

(*Grammaire*)
(***
E ::= P
P ::= M SP
M ::= T SM
SP ::= ’+’  M SP | '-' M SP | ε
SM ::= '*' T SM | ε
T := C | '(' E ')'

3 + 8 * 3 * 3
3+(8-3)*8
 ***)


let rec pr_E2 : (aexp, char) ranalist =
  fun l ->
  l |> pr_P and
    pr_P : (aexp, char) ranalist =
      fun l ->
      l |> pr_M ++> fun a -> pr_SP a and
    pr_SP (x : aexp)  : (aexp, char) ranalist =
      fun l ->
      l |> (terminal '-' -+> pr_M ++> fun a -> pr_SP (Amo(x,a))) +|(terminal '+' -+> pr_M ++> fun a -> pr_SP (Apl(x,a))) +| (epsilon_res x) and
    pr_M : (aexp, char) ranalist =
      fun l ->
      l |> pr_T1 ++> fun a -> pr_SM a and
    pr_SM (x : aexp)  : (aexp, char) ranalist =
      fun l ->
      l |> (terminal '*' -+> pr_T1 ++> fun a -> pr_SM (Amu(x,a))) +| (epsilon_res x) and
    pr_T1 : (aexp, char) ranalist =
      fun l ->
      l |> (pr_C ++> fun a -> epsilon_res (Acst(a))) +| (terminal '(' -+> pr_E2 ++> fun a -> terminal ')' -+> epsilon_res a)

let expr2 = list_of_string "3-8*3*3"
let bigExpr2 = list_of_string "3+(8-3)*(8+3)"

let _ = let (aex, liste) = pr_E2 expr2 in assert (aex = Amo (Acst 3, Amu (Amu (Acst 8, Acst 3), Acst 3)) && liste = [])
let _ = let (aex, liste) = pr_E2 bigExpr2 in assert (aex = Apl (Acst 3, Amu (Amo (Acst 8, Acst 3), Apl (Acst 8, Acst 3))) && liste = [])
let _ = let (aex, liste) = pr_E1 bigExpr in assert (aex = Apl (Apl (Acst 8, Acst 3), Acst 8) && liste = [])
let _ = let (aex, liste) = pr_E1 bigbigExpr in assert (aex = Apl (Apl (Acst 3, Apl (Acst 8, Acst 3)), Acst 8) && liste = [])
let _ = let (aex, liste) = pr_E1 bigValue in assert (aex = Acst 8 && liste = [])




